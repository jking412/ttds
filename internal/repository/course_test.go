package repository

import (
	"awesomeProject/internal/model"
	"awesomeProject/pkg/db"
	"testing"
)

func TestGetCourseByID(t *testing.T) {
	course := generateMockCourse(true) // Generate course with details
	defer cleanMockCourse(course)

	// Execute - 执行测试方法
	result, err := courseRepositoryInstance.GetCourseByID(course.ID)

	// Verify - 验证结果
	if err != nil {
		t.Errorf("Expected no error, got %v", err)
	}
	if result.Title != course.Title {
		t.Errorf("Expected title %v, got %v", course.Title, result.Title)
	}
	// Check for specific details generated by helper
	if len(result.Chapters) != 1 { // generateMockCourse(true) creates 1 chapter
		t.Errorf("Expected 1 chapter, got %v", len(result.Chapters))
	}
	if len(result.Chapters[0].Sections) != 2 { // generateMockChapter(true) creates 2 sections
		t.Errorf("Expected 2 sections, got %v", len(result.Chapters[0].Sections))
	}
	if len(result.References) != 1 { // generateMockCourse(true) creates 1 reference
		t.Errorf("Expected 1 reference, got %v", len(result.References))
	}

	// Cleanup - Handled by defer
}

func BenchmarkGetCourseByID(b *testing.B) {
	course := generateMockCourse(true)
	defer cleanMockCourse(course)

	for i := 0; i < b.N; i++ {
		_, err := courseRepositoryInstance.GetCourseByID(course.ID)
		if err != nil {
			b.Errorf("Expected no error, got %v", err)
		}
	}
	// Cleanup - Handled by defer
}

func TestGetAllCourses(t *testing.T) {
	// Setup - 创建测试数据
	course1 := generateMockCourse(false) // Generate course without details
	course2 := generateMockCourse(false)
	defer cleanMockCourse(course1)
	defer cleanMockCourse(course2)

	// Execute - 执行测试方法
	courses, err := courseRepositoryInstance.GetAllCourses()

	// Verify - 验证结果
	if err != nil {
		t.Errorf("Expected no error, got %v", err)
	}
	// 至少应该有我们创建的两个课程
	if len(courses) < 2 {
		t.Errorf("Expected at least 2 courses, got %v", len(courses))
	}

	// 验证我们创建的课程是否在结果中
	found1, found2 := false, false
	for _, c := range courses {
		if c.ID == course1.ID {
			found1 = true
		}
		if c.ID == course2.ID {
			found2 = true
		}
	}
	if !found1 || !found2 {
		t.Errorf("Not all created courses were found in the result")
	}

	// Cleanup - 清理测试数据
	db.DB.Unscoped().Delete(course1)
	db.DB.Unscoped().Delete(course2)
}

func TestGetCourseReferencesByCourseID(t *testing.T) {
	// Setup - 创建测试数据
	course := &model.Course{
		Title:       "测试课程",
		Description: "这是一个测试课程",
		Category:    "测试",
	}
	db.DB.Create(course)

	// 创建参考资料
	reference1 := &model.CourseReference{
		CourseID:    course.ID,
		Title:       "测试参考资料1",
		Type:        "pdf",
		URL:         "test1.pdf",
		Description: "这是测试参考资料1",
	}
	reference2 := &model.CourseReference{
		CourseID:    course.ID,
		Title:       "测试参考资料2",
		Type:        "link",
		URL:         "https://test.com",
		Description: "这是测试参考资料2",
	}
	db.DB.Create(reference1)
	db.DB.Create(reference2)

	// Execute - 执行测试方法
	references, err := courseRepositoryInstance.GetCourseReferencesByCourseID(course.ID)

	// Verify - 验证结果
	if err != nil {
		t.Errorf("Expected no error, got %v", err)
	}
	if len(references) != 2 {
		t.Errorf("Expected 2 references, got %v", len(references))
	}

	// 验证参考资料内容
	found1, found2 := false, false
	for _, ref := range references {
		if ref.ID == reference1.ID {
			found1 = true
			if ref.Title != reference1.Title {
				t.Errorf("Expected title %v, got %v", reference1.Title, ref.Title)
			}
		}
		if ref.ID == reference2.ID {
			found2 = true
			if ref.Type != reference2.Type {
				t.Errorf("Expected type %v, got %v", reference2.Type, ref.Type)
			}
		}
	}
	if !found1 || !found2 {
		t.Errorf("Not all created references were found in the result")
	}

	// Cleanup - 清理测试数据
	db.DB.Unscoped().Delete(reference1)
	db.DB.Unscoped().Delete(reference2)
	db.DB.Unscoped().Delete(course)
}

func TestGetCourseStatusByCourseID(t *testing.T) {
	// Setup - 创建测试数据
	user := generateMockUser()
	defer cleanMockUser(user)

	course := generateMockCourse(false)
	defer cleanMockCourse(course)

	chapter := generateMockChapter(course.ID, 1, false)
	defer cleanMockChapter(chapter)

	section1 := generateMockSection(chapter.ID, 1)
	section2 := generateMockSection(chapter.ID, 2)
	// No defer for sections, cleanMockChapter handles it

	// 创建用户学习状态
	status1 := generateMockUserSectionStatus(user.ID, section1.ID, true)
	status2 := generateMockUserSectionStatus(user.ID, section2.ID, false)
	defer cleanMockUserSectionStatus(status1)
	defer cleanMockUserSectionStatus(status2)

	// Execute - 执行测试方法
	statuses, err := courseRepositoryInstance.GetCourseStatusByCourseID(user.ID, course.ID)

	// Verify - 验证结果
	if err != nil {
		t.Errorf("Expected no error, got %v", err)
	}
	if len(statuses) != 2 {
		t.Errorf("Expected 2 statuses, got %v", len(statuses))
	}

	// 验证状态内容
	found1, found2 := false, false
	for _, status := range statuses {
		if status.ID == status1.ID {
			found1 = true
			if status.Status != "completed" {
				t.Errorf("Expected status 'completed', got %v", status.Status)
			}
		}
		if status.ID == status2.ID {
			found2 = true
			if status.Status != "incomplete" {
				t.Errorf("Expected status 'incomplete', got %v", status.Status)
			}
		}
	}
	if !found1 || !found2 {
		t.Errorf("Not all created statuses were found in the result")
	}

	// Cleanup - 清理测试数据
	db.DB.Unscoped().Delete(status1)
	db.DB.Unscoped().Delete(status2)
	db.DB.Unscoped().Delete(section1)
	db.DB.Unscoped().Delete(section2)
	db.DB.Unscoped().Delete(chapter)
	db.DB.Unscoped().Delete(course)
	db.DB.Unscoped().Delete(user)
}
